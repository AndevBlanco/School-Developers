{"ast":null,"code":"export const iniciarSesion = (dispatch, Firebase, correo, contraseña) => {\n  return new Promise((resolve, eject) => {\n    Firebase.auth.signInWithEmailAndPassword(correo, contraseña).then(auth => {\n      Firebase.db.collection(\"Usuarios\").doc(auth.user.uid).get().then(doc => {\n        const usuarioDB = doc.data();\n        dispatch({\n          type: \"INICIAR_SESION\",\n          sesion: usuarioDB,\n          autenticado: true\n        });\n        resolve();\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  });\n};\nexport const crearUsuario = (dispatch, Firebase, usuario) => {\n  return new Promise((resolve, eject) => {\n    Firebase.auth.createUserWithEmailAndPassword(usuario.correo, usuario.contraseña).then(auth => {\n      Firebase.db.collection(\"Usuarios\").doc(auth.user.uid).set({\n        id: auth.user.uid,\n        nombre: usuario.nombre,\n        apellido: usuario.apellido,\n        correo: usuario.correo,\n        tipo: usuario.tipo\n      }, {\n        merge: true\n      }).then(doc => {\n        usuario.id = auth.user.uid;\n        dispatch({\n          type: \"INICIAR_SESION\",\n          sesion: usuario,\n          autenticado: true\n        });\n        resolve();\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  });\n};\nexport const cerrarSesion = (dispatch, Firebase) => {\n  return new Promise((resolve, eject) => {\n    Firebase.auth.signOut().then(salir => {\n      dispatch({\n        type: \"CERRAR_SESION\",\n        nuevoUsuario: {\n          nombre: \"\",\n          apellido: \"\",\n          correo: \"\",\n          foto: \"\",\n          id: \"\",\n          telefono: \"\"\n        },\n        autenticado: false\n      });\n      resolve();\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/pulgueperro/Desktop/schooldevelopers-app/src/sesion/actions/sesionAction.js"],"names":["iniciarSesion","dispatch","Firebase","correo","contraseña","Promise","resolve","eject","auth","signInWithEmailAndPassword","then","db","collection","doc","user","uid","get","usuarioDB","data","type","sesion","autenticado","catch","error","console","log","crearUsuario","usuario","createUserWithEmailAndPassword","set","id","nombre","apellido","tipo","merge","cerrarSesion","signOut","salir","nuevoUsuario","foto","telefono"],"mappings":"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","sourcesContent":["export const iniciarSesion = (dispatch, Firebase, correo, contraseña) => {\r\n    return new Promise((resolve, eject) => {\r\n        Firebase.auth\r\n            .signInWithEmailAndPassword(correo, contraseña)\r\n            .then(auth => {\r\n                Firebase.db\r\n                    .collection(\"Usuarios\")\r\n                    .doc(auth.user.uid)\r\n                    .get()\r\n                    .then(doc => {\r\n                        const usuarioDB = doc.data();\r\n                        dispatch({\r\n                            type: \"INICIAR_SESION\",\r\n                            sesion: usuarioDB,\r\n                            autenticado: true\r\n                        });\r\n                        resolve();\r\n                    });\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n    });\r\n};\r\nexport const crearUsuario = (dispatch, Firebase, usuario) => {\r\n    return new Promise((resolve, eject) => {\r\n        Firebase.auth\r\n            .createUserWithEmailAndPassword(usuario.correo, usuario.contraseña)\r\n            .then(auth => {\r\n                Firebase.db\r\n                    .collection(\"Usuarios\")\r\n                    .doc(auth.user.uid)\r\n                    .set({\r\n                        id: auth.user.uid,\r\n                        nombre: usuario.nombre,\r\n                        apellido: usuario.apellido,\r\n                        correo: usuario.correo,\r\n                        tipo: usuario.tipo\r\n                    }, { merge: true }\r\n                    )\r\n                    .then(doc => {\r\n                        usuario.id = auth.user.uid\r\n                        dispatch({\r\n                            type: \"INICIAR_SESION\",\r\n                            sesion: usuario,\r\n                            autenticado: true\r\n                        });\r\n                        resolve();\r\n                    });\r\n            }).catch(error => {\r\n                console.log(error)\r\n            });\r\n    });\r\n};\r\nexport const cerrarSesion=(dispatch,Firebase)=>{\r\n    return new Promise((resolve,eject)=>{\r\n        Firebase.auth.signOut().then(salir=>{\r\n            dispatch({\r\n                type:\"CERRAR_SESION\",\r\n                nuevoUsuario:{\r\n                    nombre:\"\",\r\n                    apellido:\"\",\r\n                    correo:\"\",\r\n                    foto:\"\",\r\n                    id:\"\",\r\n                    telefono:\"\",\r\n                },\r\n                autenticado:false\r\n            })\r\n            resolve();\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}